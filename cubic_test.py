# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x4jioIXp9LqsC8Uep_-5wKYRC9arkrr0
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import animation
#!pip install cvxpy
import cvxpy as cp

def f(x):
    return np.log(x) + 1/x

def error(xa,xb,xc,xd):
    M = np.array([[xa**3, xa**2, xa, 1],
                  [xb**3, xb**2, xb, 1],
                  [xc**3, xc**2, xc, 1],
                  [xd**3, xd**2, xd, 1]])
    B = np.array([f(xa),f(xb),f(xc),f(xd)])
    A = np.linalg.solve(M, B)
    X = np.roots([-3*A[0],-2*A[1],-A[2],1,-1])
    X = X[X>0]
    error = abs(f(X) - (A[0]*X**3 + A[1]*X**2 + A[2]*X + A[3])) 
    return max(error)

def error2(xa,xd):
	step = 5
	xbcan = np.linspace(xa,xd,step)
	xccan = np.linspace(xa,xd,step)
	n = len(xbcan)
	count = 0
	preerr = 1e9
	while count < 200:
		err = np.ones((n,n))*1e9
		for i in range(n):
			for j in range(n):
				if (xbcan[i]!= xa and xbcan[i]!= xd and xccan[j]!= xa and xccan[j]!= xd and xbcan[i] < xccan[j]):
					err[i][j] = error(xa,xbcan[i],xccan[j],xd)

		[xbi,xci] = np.unravel_index(err.argmin(), err.shape)
		#print(xbcan[xbi],xccan[xci],err[xbi][xci])
		if abs(err[xbi][xci] - preerr) < 1e-15:
			return err[xbi][xci],xbcan[xbi],xccan[xci]
		else:
			preerr = err[xbi][xci]

		xbcan = np.linspace(xbcan[max(xbi-1,0)],xbcan[min(xbi+1,step-1)],step)
		xccan = np.linspace(xccan[max(xci-1,0)],xccan[min(xci+1,step-1)],step)
		count += 1


def search(begin, end, precision):
    pivot = begin
    while abs(begin - end) > 1e-9:
        mid = (begin + end)/2
        a = (f(mid) - f(pivot))/(mid-pivot)
        b = f(mid) - a*mid
        if error2(pivot,mid)[0] <= precision:
            begin = mid
        else:
            end = mid
    return (begin + end)/2

def approximate(precision,eps):
    lines = []
    curr = 2
    while curr - eps > 1e-8:
        next = search(curr,eps,precision)
        xbc = error2(curr, next)
        c = [curr, xbc[2], xbc[1], next]
        #print(c)
        lines.append(c)
        curr = next
    return np.array(lines)

curves = approximate(1e-4,5e-3)
np.set_printoptions(precision = 8)
print(curves)
print(len(curves))